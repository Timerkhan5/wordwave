@model wordwave.Models.Task
@using wordwave.Models
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = $"Задание {Model.Id}";
}
@section Styles {
    <link rel="stylesheet" href="~/css/style.css" asp-append-version="true" />
    <style>
        .task-reviews-block {
            position: fixed;
            top: 80px;
            left: 0;
            width: 320px;
            min-width: 220px;
            background: #f7f6fd;
            border-radius: 0 10px 10px 0;
            box-shadow: 2px 0 12px rgba(141,92,246,0.07);
            padding: 18px 14px 12px 14px;
            z-index: 100;
            height: calc(100vh - 100px);
            overflow-y: auto;
        }
        .task-page-flex {
            margin-left: 340px;
            /* чтобы основной контент не перекрывался блоком отзывов */
        }
        .task-reviews-title {
            font-size: 18px;
            font-weight: 700;
            color: #8d5cf6;
            margin-bottom: 10px;
        }
        .reviews-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 10px;
        }
        .review-card {
            display: flex;
            align-items: flex-start;
            gap: 10px;
            background: #fff;
            border-radius: 6px;
            box-shadow: 0 1px 4px rgba(141,92,246,0.04);
            padding: 8px 12px 8px 8px;
        }
        .review-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #e0d7f7;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: #8d5cf6;
            font-size: 16px;
            flex-shrink: 0;
        }
        .review-content {
            flex: 1;
        }
        .review-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 2px;
        }
        .review-name {
            font-weight: 600;
            color: #232e52;
            font-size: 15px;
        }
        .review-date {
            color: #aaa;
            font-size: 13px;
        }
        .review-stars {
            color: #f5b942;
            font-size: 15px;
            margin-left: 4px;
        }
        .review-text {
            font-size: 15px;
            color: #232e52;
            margin-top: 2px;
        }
        .review-form {
            margin-top: 8px;
        }
    </style>
}
<main>
    <div class="task-reviews-block">
        <div class="task-reviews-title">Отзывы к заданию</div>
        <div class="reviews-list" id="task-reviews-list"></div>
        <div style="flex:1;"></div>
        <form class="review-form" id="task-review-form">
            <input type="text" name="userName" placeholder="Ваше имя" required />
            <textarea name="text" placeholder="Ваш отзыв" required></textarea>
            <select name="rating" required>
                <option value="">Оценка</option>
                <option value="5">5</option>
                <option value="4">4</option>
                <option value="3">3</option>
                <option value="2">2</option>
                <option value="1">1</option>
            </select>
            <button type="submit">Оставить отзыв</button>
        </form>
    </div>
    <div class="task-page-flex">
        <div class="task-container">
            <div class="task-title">Задание @Model.Id</div>
            <form class="task-card-main" id="task-form">
                <div class="task-question">@Model.Question</div>
                <div class="task-options">
                    <label class="task-option">
                        <input type="radio" name="answer" value="1">
                        @Model.Option1
                    </label>
                    <label class="task-option">
                        <input type="radio" name="answer" value="2">
                        @Model.Option2
                    </label>
                    <label class="task-option">
                        <input type="radio" name="answer" value="3">
                        @Model.Option3
                    </label>
                    <label class="task-option">
                        <input type="radio" name="answer" value="4">
                        @Model.Option4
                    </label>
                </div>
                <button type="submit" class="btn btn--primary" style="margin-top:36px; font-size:20px;">Ответить</button>
            </form>
            <div id="task-message" style="margin-top:18px;font-size:18px;color:#f50049;"></div>
        </div>
    </div>
</main>
@section Scripts {
<script>
function renderStars(rating) {
    let stars = '';
    for (let i = 1; i <= 5; i++) {
        stars += i <= rating ? '★' : '☆';
    }
    return stars;
}
async function loadTaskReviews() {
    const reviewsList = document.getElementById('task-reviews-list');
    reviewsList.innerHTML = '<div style="color:#888;font-size:16px;">Загрузка...</div>';
    const resp = await fetch('/api/reviews/by-task/@Model.Id');
    const reviews = resp.ok ? await resp.json() : [];
    if (!Array.isArray(reviews) || reviews.length === 0) {
        reviewsList.innerHTML = '<div style="color:#888;font-size:16px;">Пока нет отзывов</div>';
        return;
    }
    reviewsList.innerHTML = reviews.map(r => `
        <div class="review-card">
            <div class="review-avatar">${r.userName ? r.userName[0].toUpperCase() : '?'}</div>
            <div class="review-content">
                <div class="review-header">
                    <span class="review-name">${r.userName}</span>
                    <span class="review-date">${new Date(r.createdAt).toLocaleDateString()}</span>
                    <span class="review-stars">${renderStars(r.rating)}</span>
                </div>
                <div class="review-text">${r.text}</div>
            </div>
        </div>
    `).join('');
}
document.getElementById('task-review-form').onsubmit = async function(e) {
    e.preventDefault();
    const form = e.target;
    const data = {
        userName: form.userName.value,
        text: form.text.value,
        rating: parseInt(form.rating.value),
        taskId: @Model.Id
    };
    await fetch('/api/reviews', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    });
    form.reset();
    loadTaskReviews();
};
document.addEventListener('DOMContentLoaded', loadTaskReviews);
const correctValue = "@Model.CorrectOption";
const form = document.getElementById('task-form');
const msg = document.getElementById('task-message');
form.onsubmit = async function(e) {
  e.preventDefault();
  form.classList.remove('task-card-main--correct', 'task-card-main--wrong');
  msg.textContent = '';
  const checked = document.querySelector('input[name="answer"]:checked');
  if (!checked) {
    msg.textContent = 'Пожалуйста, выберите вариант ответа.';
    return;
  }
  if (checked.value === correctValue) {
    form.classList.add('task-card-main--correct');
    msg.style.color = '#4caf50';
    msg.textContent = 'Верно! Переход к модулю...';
    // Сохраняем прогресс пользователя через POST-запрос
    try {
      await fetch('/Task/Complete/@Model.Id', { method: 'POST' });
    } catch {}
    setTimeout(() => {
      window.location.href = '/Module/Index';
    }, 1200);
  } else {
    form.classList.add('task-card-main--wrong');
    msg.style.color = '#f50049';
    msg.textContent = 'Неправильно. Попробуйте еще раз.';
    setTimeout(() => {
      form.classList.remove('task-card-main--wrong');
    }, 1500);
  }
};
</script>
}
